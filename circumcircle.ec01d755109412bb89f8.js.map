{"version":3,"file":"circumcircle.ec01d755109412bb89f8.js","mappings":"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","sources":["webpack://p5_test/./src/utils.js","webpack://p5_test/./src/circumcircle.js"],"sourcesContent":["export const cosineRule = (a, b, c) => Math.acos((b*b + c*c - a*a) / (2 * b * c));\r\n\r\nexport const dist = (p1, p2) => Math.sqrt(Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2));\r\n\r\nexport const circumcenter = (a, b, c) => {\r\n    const ab = dist(a, b);\r\n    const ac = dist(a, c);\r\n    const bc = dist(b, c);\r\n    const A = cosineRule(bc, ab, ac);\r\n    const B = cosineRule(ac, bc, ab);\r\n    const C = Math.PI - (A + B);\r\n    const sin2A = Math.sin(2 * A);\r\n    const sin2B = Math.sin(2 * B);\r\n    const sin2C = Math.sin(2 * C);\r\n    const denom = sin2A + sin2B + sin2C;\r\n    return [\r\n        (a[0]*sin2A + b[0]*sin2B + c[0]*sin2C) / denom,\r\n        (a[1]*sin2A + b[1]*sin2B + c[1]*sin2C) / denom\r\n    ];\r\n}\r\n\r\nexport const circumradius = (a, b, c) => {\r\n    [a, b, c] = [dist(a, b), dist(a, c), dist(b, c)];\r\n    return (\r\n        (a * b * c) / Math.sqrt((a + b + c) * (b + c - a) * (c + a - b) * (a + b - c))\r\n    );\r\n}\r\n\r\nexport const randint = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\r\n\r\nexport const getLineEquation = (p1, p2) => {\r\n    const m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\r\n    const c = p1[1] - m * p1[0];\r\n    return {\r\n        m, c,\r\n        // needs to be function not arrow to access this obj\r\n        func: function(x) {\r\n            return this.m * x + this.c;\r\n        }\r\n    };\r\n}\r\n\r\nexport const lineIntersection = (le1, le2) => {\r\n    if (le1.m === undefined || le2.m === undefined) {\r\n        throw \"an arg is not a line equation\";\r\n    }\r\n    const x = (le2.c - le1.c) / (le1.m - le2.m);\r\n    const y = le1.func(x);\r\n    return [x, y];\r\n}\r\n\r\nexport const getSuperTriangle = (P, Q, R, S, example = false) => {\r\n    // Vertex order:\r\n    // b---c\r\n    // |   |\r\n    // a---d\r\n    const scale = 1.05;\r\n    const M = [P[0] + (S[0] - P[0]) / 2, P[1] + (Q[1] - P[1]) / 2];\r\n    const getScaled = (v) => [scale * (v[0] - M[0]) + M[0], scale * (v[1] - M[1]) + M[1]];\r\n    const A = getScaled(P);\r\n    const B = getScaled(Q);\r\n    const C = getScaled(R);\r\n    const D = getScaled(S);\r\n    const width = D[0] - A[0];\r\n    const left = [A[0] - width, A[1]];  // L\r\n    const right = [D[0] + width, D[1]]; // R\r\n    const I = lineIntersection(getLineEquation(left, B), getLineEquation(right, C));\r\n    if (example) {\r\n        return [[left, I, right], [A, B, C, D]];\r\n    }\r\n    return [left, I, right];\r\n}\r\n","import { circumcenter, circumradius } from \"./utils\";\r\n\r\nconst betterMethod = (A, B, C) => {\r\n    const Bp = [B[0] - A[0], B[1] - A[1]];\r\n    const Cp = [C[0] - A[0], C[1] - A[1]];\r\n    const Dp = 2 * (Bp[0]*Cp[1] - Bp[1]*Cp[0]);\r\n    const f = Bp[0]*Bp[0] + Bp[1]*Bp[1];\r\n    const g = Cp[0]*Cp[0] + Cp[1]*Cp[1];\r\n    const Up = [\r\n        (Cp[1]*f - Bp[1]*g) / Dp,\r\n        (Bp[0]*g - Cp[0]*f) / Dp\r\n    ];\r\n    const r = Math.sqrt(Up[0]*Up[0] + Up[1]*Up[1]);\r\n    const U = [Up[0] + A[0], Up[1] + A[1]];\r\n    return {center: U, radius: r};\r\n}\r\n\r\nconst POINTS = [[310, 130], [220, 280], [350, 130]];\r\nconst sketch = (p) => {\r\n    const points = POINTS;\r\n    let cr = circumradius(...points);\r\n    let cc = circumcenter(...points);\r\n    console.log(cc, cr);\r\n    betterMethod(...points);\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(1000, 1000);\r\n    }\r\n\r\n    p.draw = () => {\r\n        cr = circumradius(...points);\r\n        cc = circumcenter(...points);\r\n        p.background(220);\r\n        p.stroke(\"black\");\r\n        p.strokeWeight(2);\r\n        p.triangle(...points[0], ...points[1], ...points[2]);\r\n        for (const [x, y] of points) {\r\n            p.strokeWeight(10);\r\n            p.point(x, y);\r\n        }\r\n        p.stroke(\"red\");\r\n        p.strokeWeight(1);\r\n        p.noFill();\r\n        p.circle(...cc, cr * 2);\r\n        p.strokeWeight(10);\r\n        p.point(...cc);\r\n    }\r\n}\r\n\r\nnew p5(sketch, \"canvas\");\r\n\r\ndocument.getElementById(\"p1-x\").oninput = (e) => {\r\n    POINTS[0][0] = e.target.value;\r\n}\r\ndocument.getElementById(\"p1-y\").oninput = (e) => {\r\n    POINTS[0][1] = e.target.value;\r\n}\r\ndocument.getElementById(\"p2-x\").oninput = (e) => {\r\n    POINTS[1][0] = e.target.value;\r\n}\r\ndocument.getElementById(\"p2-y\").oninput = (e) => {\r\n    POINTS[1][1] = e.target.value;\r\n}\r\ndocument.getElementById(\"p3-x\").oninput = (e) => {\r\n    POINTS[2][0] = e.target.value;\r\n}\r\ndocument.getElementById(\"p3-y\").oninput = (e) => {\r\n    POINTS[2][1] = e.target.value;\r\n}\r\n"],"names":["cosineRule","a","b","c","Math","acos","dist","p1","p2","sqrt","pow","circumcenter","ab","ac","bc","A","B","C","PI","sin2A","sin","sin2B","sin2C","denom","circumradius","betterMethod","Bp","Cp","Dp","f","g","Up","r","center","radius","POINTS","p5","p","points","cr","cc","console","log","setup","createCanvas","draw","background","stroke","strokeWeight","triangle","x","y","point","noFill","circle","document","getElementById","oninput","e","target","value"],"sourceRoot":""}