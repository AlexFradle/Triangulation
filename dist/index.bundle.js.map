{"version":3,"file":"index.bundle.js","mappings":"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","sources":["webpack://p5_test/./src/utils.js","webpack://p5_test/./src/index.js"],"sourcesContent":["export const cosineRule = (a, b, c) => Math.acos((b*b + c*c - a*a) / (2 * b * c));\r\n\r\nexport const dist = (p1, p2) => Math.sqrt(Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2));\r\n\r\nexport const circumcenter = (a, b, c) => {\r\n    const ab = dist(a, b);\r\n    const ac = dist(a, c);\r\n    const bc = dist(b, c);\r\n    const A = cosineRule(bc, ab, ac);\r\n    const B = cosineRule(ac, bc, ab);\r\n    const C = Math.PI - (A + B);\r\n    const sin2A = Math.sin(2 * A);\r\n    const sin2B = Math.sin(2 * B);\r\n    const sin2C = Math.sin(2 * C);\r\n    const denom = sin2A + sin2B + sin2C;\r\n    return [\r\n        (a[0]*sin2A + b[0]*sin2B + c[0]*sin2C) / denom,\r\n        (a[1]*sin2A + b[1]*sin2B + c[1]*sin2C) / denom\r\n    ];\r\n}\r\n\r\nexport const circumradius = (a, b, c) => {\r\n    [a, b, c] = [dist(a, b), dist(a, c), dist(b, c)];\r\n    return (\r\n        (a * b * c) / Math.sqrt((a + b + c) * (b + c - a) * (c + a - b) * (a + b - c))\r\n    );\r\n}\r\n\r\nexport const randint = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\r\n\r\nexport const getLineEquation = (p1, p2) => {\r\n    const m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\r\n    const c = p1[1] - m * p1[0];\r\n    return {\r\n        m, c,\r\n        // needs to be function not arrow to access this obj\r\n        func: function(x) {\r\n            return this.m * x + this.c;\r\n        }\r\n    };\r\n}\r\n\r\nexport const lineIntersection = (le1, le2) => {\r\n    if (le1.m === undefined || le2.m === undefined) {\r\n        throw \"an arg is not a line equation\";\r\n    }\r\n    const x = (le2.c - le1.c) / (le1.m - le2.m);\r\n    const y = le1.func(x);\r\n    return [x, y];\r\n}\r\n\r\nexport const getSuperTriangle = (P, Q, R, S, example = false) => {\r\n    // Vertex order:\r\n    // b---c\r\n    // |   |\r\n    // a---d\r\n    const scale = 1.05;\r\n    const M = [P[0] + (S[0] - P[0]) / 2, P[1] + (Q[1] - P[1]) / 2];\r\n    const getScaled = (v) => [scale * (v[0] - M[0]) + M[0], scale * (v[1] - M[1]) + M[1]];\r\n    const A = getScaled(P);\r\n    const B = getScaled(Q);\r\n    const C = getScaled(R);\r\n    const D = getScaled(S);\r\n    const width = D[0] - A[0];\r\n    const left = [A[0] - width, A[1]];  // L\r\n    const right = [D[0] + width, D[1]]; // R\r\n    const I = lineIntersection(getLineEquation(left, B), getLineEquation(right, C));\r\n    if (example) {\r\n        return [[left, I, right], [A, B, C, D]];\r\n    }\r\n    return [left, I, right];\r\n}\r\n","import { circumcenter, circumradius, randint, dist, getSuperTriangle } from \"./utils\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\nconst NUM_OF_POINTS = 20;\r\nlet FILL = true;\r\nlet SHOW_VERTS = true;\r\nlet SHOW_CIRCLES = false;\r\n\r\nconst BOUNDS = [[100, 100], [100, HEIGHT - 100], [WIDTH - 100, HEIGHT - 100], [WIDTH - 100, 100]];\r\nconst BOUNDS_WIDTH = BOUNDS[3][0] - BOUNDS[0][0];\r\nconst BOUNDS_HEIGHT = BOUNDS[1][1] - BOUNDS[0][1];\r\n\r\nconst POINTS = [\r\n    // [0, 0], [0, 1000], [1000, 1000], [1000, 0],\r\n    ...Array(NUM_OF_POINTS).fill(0).map(_ => [randint(BOUNDS[0][0], BOUNDS_WIDTH), randint(BOUNDS[0][1], BOUNDS_HEIGHT)])\r\n];\r\n\r\nclass Triangle {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.edges = this.getEdges();\r\n        this.circumcenter = circumcenter(this.a, this.b, this.c);\r\n        this.circumradius = circumradius(this.a, this.b, this.c);\r\n        this.color = [\r\n            0,\r\n            255 * (Math.min(...this.points.map(p => p[1])) / HEIGHT),\r\n            // 255 * (1 - ((Math.min(...this.points.map(p => p[1])) / HEIGHT)))\r\n            255 * (Math.min(...this.points.map(p => p[1])) / HEIGHT)\r\n        ];\r\n    }\r\n\r\n    getEdges() {\r\n        return [[this.a, this.b], [this.b, this.c], [this.c, this.a]];\r\n    }\r\n\r\n    get points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n}\r\n\r\nconst makeRandomVector = () => {\r\n    const angle = randint(0, 360) * (Math.PI / 180);\r\n    return {\r\n        unit: {x: Math.cos(angle), y: Math.sin(angle)},\r\n        magnitude: randint(1, 3)\r\n    }\r\n}\r\n\r\nconst makeTriangulation = (points, pointBounds) => {\r\n    const compareEdges = (e1, e2) => {\r\n        return (\r\n            e1[0][0] === e2[0][0] &&\r\n            e1[0][1] === e2[0][1] &&\r\n            e1[1][0] === e2[1][0] &&\r\n            e1[1][1] === e2[1][1]\r\n        ) || (\r\n            e1[1][0] === e2[0][0] &&\r\n            e1[1][1] === e2[0][1] &&\r\n            e1[0][0] === e2[1][0] &&\r\n            e1[0][1] === e2[1][1]\r\n        )\r\n    }\r\n    const superTriangle = new Triangle(...getSuperTriangle(...pointBounds));\r\n\r\n    let triangulation = [];\r\n    triangulation.push(superTriangle);\r\n    for (const point of points) {\r\n        const badTriangles = [];\r\n        for (const triangle of triangulation) {\r\n            if (dist(point, triangle.circumcenter) < triangle.circumradius) {\r\n                badTriangles.push(triangle);\r\n            }\r\n        }\r\n        const polygon = [];\r\n        for (const triangle of badTriangles) {\r\n            for (const edge of triangle.edges) {\r\n                // remove current triangle, get all edges\r\n                const isEdge = badTriangles.filter(t => t !== triangle)\r\n                                           .flatMap(t => t.edges)\r\n                                           .find(e => compareEdges(e, edge));\r\n                if (isEdge === undefined) {\r\n                    polygon.push(edge);\r\n                }\r\n            }\r\n        }\r\n        for (const triangle of badTriangles) {\r\n            triangulation = triangulation.filter(t => t !== triangle);\r\n        }\r\n        for (const edge of polygon) {\r\n            const newTri = new Triangle(edge[0], edge[1], point);\r\n            triangulation.push(newTri);\r\n        }\r\n    }\r\n    for (const triangle of triangulation) {\r\n        if (triangle.points.some(v => superTriangle.points.includes(v))) {\r\n            triangulation = triangulation.filter(t => t !== triangle);\r\n        }\r\n    }\r\n    return triangulation;\r\n}\r\n\r\n\r\n\r\nconst sketch = (p) => {\r\n    const points = POINTS;\r\n    const pointsVectors = Array(POINTS.length).fill(0).map(_ => makeRandomVector());\r\n    // const bounds = [[0, 0], [0, HEIGHT], [WIDTH, HEIGHT], [WIDTH, 0]];\r\n    let triangles = makeTriangulation(POINTS, BOUNDS);\r\n    let selectedIndex = null;\r\n\r\n    const movePoints = () => {\r\n        for (let i = 0; i < POINTS.length; i++) {\r\n            let newX = POINTS[i][0] + (pointsVectors[i].unit.x * pointsVectors[i].magnitude);\r\n            let newY = POINTS[i][1] + (pointsVectors[i].unit.y * pointsVectors[i].magnitude);\r\n\r\n            if (newX < BOUNDS[0][0] || newX > BOUNDS[3][0]) {\r\n                pointsVectors[i].unit.x = -pointsVectors[i].unit.x;\r\n                newX = POINTS[i][0] + (pointsVectors[i].unit.x * pointsVectors[i].magnitude);\r\n            }\r\n            if (newY < BOUNDS[0][1] || newY > BOUNDS[2][0]) {\r\n                pointsVectors[i].unit.y = -pointsVectors[i].unit.y;\r\n                newY = POINTS[i][1] + (pointsVectors[i].unit.y * pointsVectors[i].magnitude);\r\n            }\r\n\r\n            POINTS[i] = [newX, newY];\r\n        }\r\n    }\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(WIDTH, HEIGHT);\r\n        p.frameRate(60);\r\n    }\r\n\r\n    p.draw = () => {\r\n        p.background(255);\r\n        triangles = makeTriangulation(POINTS, BOUNDS);\r\n        p.noFill();\r\n        p.stroke(\"red\");\r\n        p.rect(100, 100, BOUNDS_WIDTH, BOUNDS_HEIGHT);\r\n        movePoints();\r\n        p.strokeWeight(1);\r\n        if (!FILL) p.noFill();\r\n        for (const t of triangles) {\r\n            p.stroke(...t.color);\r\n            if (FILL) p.fill(...t.color);\r\n            p.triangle(...t.a, ...t.b, ...t.c);\r\n        }\r\n\r\n        if (SHOW_VERTS) {\r\n            p.strokeWeight(10);\r\n            p.stroke(\"black\");\r\n            for (const [x, y] of points) {\r\n                p.point(x, y);\r\n            }\r\n        }\r\n\r\n        if (SHOW_CIRCLES) {\r\n            p.noFill();\r\n            for (const t of triangles) {\r\n                p.stroke(...t.color);\r\n                p.circle(...t.circumcenter, t.circumradius * 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    p.mousePressed = () => {\r\n        for (let i = 0; i < POINTS.length; i++) {\r\n            const [x, y] = POINTS[i];\r\n            const d = dist([p.mouseX, p.mouseY], [x, y]);\r\n            if (d < 20) {\r\n                selectedIndex = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    p.mouseDragged = () => {\r\n        const [x, y] = POINTS[selectedIndex];\r\n        if (dist([p.mouseX, p.mouseY], [x, y]) < 20) {\r\n            POINTS[selectedIndex] = [p.mouseX, p.mouseY];\r\n        }\r\n    }\r\n}\r\n\r\nnew p5(sketch, \"canvas\");\r\ndocument.getElementById(\"toggle-fill\").onchange = (e) => {\r\n    FILL = e.target.checked;\r\n}\r\n\r\n"],"names":["cosineRule","a","b","c","Math","acos","dist","p1","p2","sqrt","pow","randint","floor","random","getLineEquation","m","func","x","this","HEIGHT","FILL","BOUNDS","WIDTH","BOUNDS_WIDTH","BOUNDS_HEIGHT","POINTS","Array","fill","map","_","Triangle","constructor","edges","getEdges","circumcenter","ab","ac","bc","A","B","C","PI","sin2A","sin","sin2B","sin2C","denom","circumradius","color","min","points","p","makeTriangulation","pointBounds","superTriangle","P","Q","R","S","example","M","getScaled","v","D","width","left","right","I","le1","le2","undefined","lineIntersection","getSuperTriangle","triangulation","push","point","badTriangles","triangle","polygon","edge","filter","t","flatMap","find","e","compareEdges","e2","e1","newTri","some","includes","p5","pointsVectors","length","angle","unit","cos","y","magnitude","makeRandomVector","triangles","selectedIndex","setup","createCanvas","frameRate","draw","background","noFill","stroke","rect","i","newX","newY","movePoints","strokeWeight","mousePressed","mouseX","mouseY","mouseDragged","document","getElementById","onchange","target","checked"],"sourceRoot":""}