{"version":3,"file":"superTriangle.bundle.js","mappings":"mBAAO,MA8BMA,EAAkB,CAACC,EAAIC,KAChC,MAAMC,GAAKD,EAAG,GAAKD,EAAG,KAAOC,EAAG,GAAKD,EAAG,IAExC,MAAO,CACHE,EAAAA,EAAGC,EAFGH,EAAG,GAAKE,EAAIF,EAAG,GAIrBI,KAAM,SAASC,GACX,OAAOC,KAAKJ,EAAIG,EAAIC,KAAKH,KCPrC,IAAII,IA3BYC,IACZ,MACMC,EAAO,CAAC,CAAC,GAAI,IAAK,CAAC,GAAI,KAAM,CAAC,IAAK,KAAM,CAAC,IAAK,MAC9CC,EAAUC,GD6CW,EAACC,EAAGC,EAAGC,EAAGC,EAAGC,GAAU,KAKnD,MACMC,EAAI,CAACL,EAAE,IAAMG,EAAE,GAAKH,EAAE,IAAM,EAAGA,EAAE,IAAMC,EAAE,GAAKD,EAAE,IAAM,GACtDM,EAAaC,GAAM,CAFX,MAEqBA,EAAE,GAAKF,EAAE,IAAMA,EAAE,GAFtC,MAEmDE,EAAE,GAAKF,EAAE,IAAMA,EAAE,IAC5EG,EAAIF,EAAUN,GACdS,EAAIH,EAAUL,GACdS,EAAIJ,EAAUJ,GACdS,EAAIL,EAAUH,GACdS,EAAQD,EAAE,GAAKH,EAAE,GACjBK,EAAO,CAACL,EAAE,GAAKI,EAAOJ,EAAE,IACxBM,EAAQ,CAACH,EAAE,GAAKC,EAAOD,EAAE,IACzBI,EAxBsB,EAACC,EAAKC,KAClC,QAAcC,IAAVF,EAAI1B,QAA6B4B,IAAVD,EAAI3B,EAC3B,KAAM,gCAEV,MAAMG,GAAKwB,EAAI1B,EAAIyB,EAAIzB,IAAMyB,EAAI1B,EAAI2B,EAAI3B,GAEzC,MAAO,CAACG,EADEuB,EAAIxB,KAAKC,KAmBT0B,CAAiBhC,EAAgB0B,EAAMJ,GAAItB,EAAgB2B,EAAOJ,IAC5E,OAAIN,EACO,CAAC,CAACS,EAAME,EAAGD,GAAQ,CAACN,EAAGC,EAAGC,EAAGC,IAEjC,CAACE,EAAME,EAAGD,IChEWM,IAAoBvB,GAAM,GAEtDD,EAAEyB,MAAQ,KACNzB,EAAE0B,aAAa,IAAM,MAGzB1B,EAAE2B,KAAO,KACL3B,EAAE4B,WAAW,KACb5B,EAAE6B,OAAO,SACT7B,EAAE8B,QAAQ5B,EAAS,MAAOA,EAAS,IACnCF,EAAE8B,QAAQ5B,EAAS,MAAOA,EAAS,IACnCF,EAAE8B,QAAQ5B,EAAS,MAAOA,EAAS,IACnCF,EAAE6B,OAAO,OACT7B,EAAE8B,QAAQ7B,EAAK,MAAOA,EAAK,IAC3BD,EAAE8B,QAAQ7B,EAAK,MAAOA,EAAK,IAC3BD,EAAE8B,QAAQ7B,EAAK,MAAOA,EAAK,IAC3BD,EAAE8B,QAAQ7B,EAAK,MAAOA,EAAK,IAC3BD,EAAE6B,OAAO,SACT7B,EAAE8B,QAAQ3B,EAAQ,MAAOA,EAAQ,IACjCH,EAAE8B,QAAQ3B,EAAQ,MAAOA,EAAQ,IACjCH,EAAE8B,QAAQ3B,EAAQ,MAAOA,EAAQ,IACjCH,EAAE8B,QAAQ3B,EAAQ,MAAOA,EAAQ,OAG1B,W","sources":["webpack://p5_test/./src/utils.js","webpack://p5_test/./src/superTriangle.js"],"sourcesContent":["export const cosineRule = (a, b, c) => Math.acos((b*b + c*c - a*a) / (2 * b * c));\r\n\r\nexport const dist = (p1, p2) => Math.sqrt(Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2));\r\n\r\nexport const circumcenter = (a, b, c) => {\r\n    const ab = dist(a, b);\r\n    const ac = dist(a, c);\r\n    const bc = dist(b, c);\r\n    const A = cosineRule(bc, ab, ac);\r\n    const B = cosineRule(ac, bc, ab);\r\n    const C = Math.PI - (A + B);\r\n    const sin2A = Math.sin(2 * A);\r\n    const sin2B = Math.sin(2 * B);\r\n    const sin2C = Math.sin(2 * C);\r\n    const denom = sin2A + sin2B + sin2C;\r\n    return [\r\n        (a[0]*sin2A + b[0]*sin2B + c[0]*sin2C) / denom,\r\n        (a[1]*sin2A + b[1]*sin2B + c[1]*sin2C) / denom\r\n    ];\r\n}\r\n\r\nexport const circumradius = (a, b, c) => {\r\n    [a, b, c] = [dist(a, b), dist(a, c), dist(b, c)];\r\n    return (\r\n        (a * b * c) / Math.sqrt((a + b + c) * (b + c - a) * (c + a - b) * (a + b - c))\r\n    );\r\n}\r\n\r\nexport const randint = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\r\n\r\nexport const getLineEquation = (p1, p2) => {\r\n    const m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\r\n    const c = p1[1] - m * p1[0];\r\n    return {\r\n        m, c,\r\n        // needs to be function not arrow to access this obj\r\n        func: function(x) {\r\n            return this.m * x + this.c;\r\n        }\r\n    };\r\n}\r\n\r\nexport const lineIntersection = (le1, le2) => {\r\n    if (le1.m === undefined || le2.m === undefined) {\r\n        throw \"an arg is not a line equation\";\r\n    }\r\n    const x = (le2.c - le1.c) / (le1.m - le2.m);\r\n    const y = le1.func(x);\r\n    return [x, y];\r\n}\r\n\r\nexport const getSuperTriangle = (P, Q, R, S, example = false) => {\r\n    // Vertex order:\r\n    // b---c\r\n    // |   |\r\n    // a---d\r\n    const scale = 1.05;\r\n    const M = [P[0] + (S[0] - P[0]) / 2, P[1] + (Q[1] - P[1]) / 2];\r\n    const getScaled = (v) => [scale * (v[0] - M[0]) + M[0], scale * (v[1] - M[1]) + M[1]];\r\n    const A = getScaled(P);\r\n    const B = getScaled(Q);\r\n    const C = getScaled(R);\r\n    const D = getScaled(S);\r\n    const width = D[0] - A[0];\r\n    const left = [A[0] - width, A[1]];  // L\r\n    const right = [D[0] + width, D[1]]; // R\r\n    const I = lineIntersection(getLineEquation(left, B), getLineEquation(right, C));\r\n    if (example) {\r\n        return [[left, I, right], [A, B, C, D]];\r\n    }\r\n    return [left, I, right];\r\n}\r\n","import {getSuperTriangle} from \"./utils\";\r\n\r\nconst POINTS = [[310, 130], [220, 280], [350, 130]];\r\nconst sketch = (p) => {\r\n    const points = POINTS;\r\n    const rect = [[80, 20], [80, 240], [160, 240], [160, 20]];\r\n    const [superTri, bigRect] = getSuperTriangle(...rect, true);\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(1000, 1000);\r\n    }\r\n\r\n    p.draw = () => {\r\n        p.background(220);\r\n        p.stroke(\"black\");\r\n        p.line(...superTri[0], ...superTri[1]);\r\n        p.line(...superTri[1], ...superTri[2]);\r\n        p.line(...superTri[2], ...superTri[0]);\r\n        p.stroke(\"red\");\r\n        p.line(...rect[0], ...rect[1]);\r\n        p.line(...rect[1], ...rect[2]);\r\n        p.line(...rect[2], ...rect[3]);\r\n        p.line(...rect[3], ...rect[0]);\r\n        p.stroke(\"green\");\r\n        p.line(...bigRect[0], ...bigRect[1]);\r\n        p.line(...bigRect[1], ...bigRect[2]);\r\n        p.line(...bigRect[2], ...bigRect[3]);\r\n        p.line(...bigRect[3], ...bigRect[0]);\r\n    }\r\n}\r\nnew p5(sketch, \"canvas\");\r\n"],"names":["getLineEquation","p1","p2","m","c","func","x","this","p5","p","rect","superTri","bigRect","P","Q","R","S","example","M","getScaled","v","A","B","C","D","width","left","right","I","le1","le2","undefined","lineIntersection","getSuperTriangle","setup","createCanvas","draw","background","stroke","line"],"sourceRoot":""}