{"version":3,"file":"index.1ba88be3ea9b99260177.js","mappings":"mBAAO,IAAMA,EAAa,SAACC,EAAGC,EAAGC,GAAP,OAAaC,KAAKC,MAAMH,EAAEA,EAAIC,EAAEA,EAAIF,EAAEA,IAAM,EAAIC,EAAIC,KAEjEG,EAAO,SAACC,EAAIC,GAAL,OAAYJ,KAAKK,KAAKL,KAAKM,IAAIF,EAAG,GAAKD,EAAG,GAAI,GAAKH,KAAKM,IAAIF,EAAG,GAAKD,EAAG,GAAI,KA0BlFI,EAAU,SAACV,EAAGC,GAAJ,OAAUE,KAAKQ,MAAMR,KAAKS,UAAYX,EAAID,EAAI,IAAMA,GAE9Da,EAAkB,SAACP,EAAIC,GAChC,IAAMO,GAAKP,EAAG,GAAKD,EAAG,KAAOC,EAAG,GAAKD,EAAG,IAExC,MAAO,CACHQ,EAAAA,EAAGZ,EAFGI,EAAG,GAAKQ,EAAIR,EAAG,GAIrBS,KAAM,SAASC,GACX,OAAOC,KAAKH,EAAIE,EAAIC,KAAKf,KAKxBgB,EAAmB,SAACC,EAAKC,GAClC,QAAcC,IAAVF,EAAIL,QAA6BO,IAAVD,EAAIN,EAC3B,KAAM,gCAEV,IAAME,GAAKI,EAAIlB,EAAIiB,EAAIjB,IAAMiB,EAAIL,EAAIM,EAAIN,GAEzC,MAAO,CAACE,EADEG,EAAIJ,KAAKC,KAIVM,EAAmB,SAACC,EAAGC,EAAGC,EAAGC,GAAuB,IAApBC,EAAoB,wDAKvDC,EAAQ,KACRC,EAAI,CAACN,EAAE,IAAMG,EAAE,GAAKH,EAAE,IAAM,EAAGA,EAAE,IAAMC,EAAE,GAAKD,EAAE,IAAM,GACtDO,EAAY,SAACC,GAAD,MAAO,CAACH,GAASG,EAAE,GAAKF,EAAE,IAAMA,EAAE,GAAID,GAASG,EAAE,GAAKF,EAAE,IAAMA,EAAE,KAC5EG,EAAIF,EAAUP,GACdU,EAAIH,EAAUN,GACdU,EAAIJ,EAAUL,GACdU,EAAIL,EAAUJ,GACdU,EAAQD,EAAE,GAAKH,EAAE,GACjBK,EAAO,CAACL,EAAE,GAAKI,EAAOJ,EAAE,IACxBM,EAAQ,CAACH,EAAE,GAAKC,EAAOD,EAAE,IACzBI,EAAIrB,EAAiBL,EAAgBwB,EAAMJ,GAAIpB,EAAgByB,EAAOJ,IAC5E,OAAIP,EACO,CAAC,CAACU,EAAME,EAAGD,GAAQ,CAACN,EAAGC,EAAGC,EAAGC,IAEjC,CAACE,EAAME,EAAGD,I,+mFCpErB,IAAME,EAAQ,IACRC,EAAS,IAEXC,GAAO,EAILC,EAAS,CAAC,CAAC,IAAK,KAAM,CAAC,IAAKF,KAAe,CAACD,IAAaC,KAAe,CAACD,IAAa,MACtFI,EAAeD,EAAO,GAAG,GAAKA,EAAO,GAAG,GACxCE,EAAgBF,EAAO,GAAG,GAAKA,EAAO,GAAG,GAEzCG,EAAS,EAERC,MAXe,IAWMC,KAAK,GAAGC,KAAI,SAAAC,GAAC,MAAI,CAACxC,EAAQiC,EAAO,GAAG,GAAIC,GAAelC,EAAQiC,EAAO,GAAG,GAAIE,QAGnGM,EAAAA,WACF,WAAYnD,EAAGC,EAAGC,I,4FAAG,SACjBe,KAAKjB,EAAIA,EACTiB,KAAKhB,EAAIA,EACTgB,KAAKf,EAAIA,EACTe,KAAKmC,MAAQnC,KAAKoC,WAClBpC,KAAKqC,aDpBe,SAACtD,EAAGC,EAAGC,GAC/B,IAAMqD,EAAKlD,EAAKL,EAAGC,GACbuD,EAAKnD,EAAKL,EAAGE,GACbuD,EAAKpD,EAAKJ,EAAGC,GACb8B,EAAIjC,EAAW0D,EAAIF,EAAIC,GACvBvB,EAAIlC,EAAWyD,EAAIC,EAAIF,GACvBrB,EAAI/B,KAAKuD,IAAM1B,EAAIC,GACnB0B,EAAQxD,KAAKyD,IAAI,EAAI5B,GACrB6B,EAAQ1D,KAAKyD,IAAI,EAAI3B,GACrB6B,EAAQ3D,KAAKyD,IAAI,EAAI1B,GACrB6B,EAAQJ,EAAQE,EAAQC,EAC9B,MAAO,EACF9D,EAAE,GAAG2D,EAAQ1D,EAAE,GAAG4D,EAAQ3D,EAAE,GAAG4D,GAASC,GACxC/D,EAAE,GAAG2D,EAAQ1D,EAAE,GAAG4D,EAAQ3D,EAAE,GAAG4D,GAASC,GCOrBT,CAAarC,KAAKjB,EAAGiB,KAAKhB,EAAGgB,KAAKf,GACtDe,KAAK+C,aDJe,SAAChE,EAAGC,EAAGC,GAAM,MACzB,CAACG,EAAKL,EAAGC,GAAII,EAAKL,EAAGE,GAAIG,EAAKJ,EAAGC,IAC7C,OADCF,EADoC,OACjCC,EADiC,OAC9BC,EAD8B,MAGnBC,KAAKK,MAAMR,EAAIC,EAAIC,IAAMD,EAAIC,EAAIF,IAAME,EAAIF,EAAIC,IAAMD,EAAIC,EAAIC,ICCvD8D,CAAa/C,KAAKjB,EAAGiB,KAAKhB,EAAGgB,KAAKf,GACtDe,KAAKgD,MAAQ,CACT,EACO9D,KAAK+D,IAAL,MAAA/D,KAAI,EAAQc,KAAKkD,OAAOlB,KAAI,SAAAmB,GAAC,OAAIA,EAAE,QAAO3B,EAAjD,IAEOtC,KAAK+D,IAAL,MAAA/D,KAAI,EAAQc,KAAKkD,OAAOlB,KAAI,SAAAmB,GAAC,OAAIA,EAAE,QAAO3B,EAAjD,K,+CAIR,WACI,MAAO,CAAC,CAACxB,KAAKjB,EAAGiB,KAAKhB,GAAI,CAACgB,KAAKhB,EAAGgB,KAAKf,GAAI,CAACe,KAAKf,EAAGe,KAAKjB,M,kBAG9D,WACI,MAAO,CAACiB,KAAKjB,EAAGiB,KAAKhB,EAAGgB,KAAKf,Q,gFArB/BiD,GAiCAkB,EAAoB,SAACF,EAAQG,GAC/B,IAaMC,EAAgB,EAAIpB,EAAP,EAAmB7B,EAAAA,WAAA,IAAoBgD,MAEtDE,EAAgB,GACpBA,EAAcC,KAAKF,GAjB4B,UAkB3BJ,GAlB2B,IAkB/C,IAAK,EAAL,qBAA4B,OAAjBO,EAAiB,QAClBC,EAAe,GADG,IAEDH,GAFC,IAExB,IAAK,EAAL,qBAAsC,KAA3BI,EAA2B,QAC9BvE,EAAKqE,EAAOE,EAAStB,cAAgBsB,EAASZ,cAC9CW,EAAaF,KAAKG,IAJF,8BAQxB,IADA,IAAMC,EAAU,GAPQ,aAQnB,IARmB,EAQbD,EAAQ,KARK,IASDA,EAASxB,OATR,yBAST0B,EATS,aAcDzD,IAHAsD,EAAaI,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,KAClBK,SAAQ,SAAAD,GAAC,OAAIA,EAAE5B,SACf8B,MAAK,SAAAC,GAAC,OA9BpBC,EA8BwCN,GA9B5CO,EA8ByCF,GA5BpD,GAAG,KAAOC,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IAEnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,IACnBC,EAAG,GAAG,KAAOD,EAAG,GAAG,GAVN,IAACC,EAAID,MAgCVP,EAAQJ,KAAKK,IANrB,IAAK,EAAL,qBAAmC,IATf,gCAQxB,MAAuBH,EAAvB,eAAqC,IAWrC,IAnBwB,iBAmBnB,IAAMC,EAAQ,KACfJ,EAAgBA,EAAcO,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,MADpD,MAAuBD,EAAvB,eAAqC,IAGrC,IAAK,IAAL,MAAmBE,EAAnB,eAA4B,CAAvB,IAAMC,EAAI,KACLQ,EAAS,IAAInC,EAAS2B,EAAK,GAAIA,EAAK,GAAIJ,GAC9CF,EAAcC,KAAKa,KA1CoB,wCA6CxBd,GA7CwB,yBA6CpCI,EA7CoC,QA8CvCA,EAAST,OAAOoB,MAAK,SAAAxD,GAAC,OAAIwC,EAAcJ,OAAOqB,SAASzD,QACxDyC,EAAgBA,EAAcO,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,OAFxD,IAAK,EAAL,qBAAsC,IA7CS,8BAkD/C,OAAOJ,GAqFX,IAAIiB,IAhFW,SAACrB,GACZ,IAAMD,EAASrB,EACT4C,EAAgB3C,MAAMD,EAAO6C,QAAQ3C,KAAK,GAAGC,KAAI,SAAAC,GAAC,OAhElD0C,EAAQlF,EAAQ,EAAG,MAAQP,KAAKuD,GAAK,KACpC,CACHmC,KAAM,CAAC7E,EAAGb,KAAK2F,IAAIF,GAAQG,EAAG5F,KAAKyD,IAAIgC,IACvCI,UAAWtF,EAAQ,EAAG,IAJL,IACfkF,KAkEFK,EAAY5B,EAAkBvB,EAAQH,GACtCuD,EAAgB,KAoBpB9B,EAAE+B,MAAQ,WACN/B,EAAEgC,aAAa5D,EAAOC,GACtB2B,EAAEiC,UAAU,KAGhBjC,EAAEkC,KAAO,WACLlC,EAAEmC,WAAW,KACbN,EAAY5B,EAAkBvB,EAAQH,GACtCyB,EAAEoC,SACFpC,EAAEqC,OAAO,OACTrC,EAAEsC,KAAK,IAAK,IAAK9D,EAAcC,GA5BhB,WACf,IAAK,IAAI8D,EAAI,EAAGA,EAAI7D,EAAO6C,OAAQgB,IAAK,CACpC,IAAIC,EAAO9D,EAAO6D,GAAG,GAAMjB,EAAciB,GAAGd,KAAK7E,EAAI0E,EAAciB,GAAGX,UAClEa,EAAO/D,EAAO6D,GAAG,GAAMjB,EAAciB,GAAGd,KAAKE,EAAIL,EAAciB,GAAGX,WAElEY,EAAOjE,EAAO,GAAG,IAAMiE,EAAOjE,EAAO,GAAG,MACxC+C,EAAciB,GAAGd,KAAK7E,GAAK0E,EAAciB,GAAGd,KAAK7E,EACjD4F,EAAO9D,EAAO6D,GAAG,GAAMjB,EAAciB,GAAGd,KAAK7E,EAAI0E,EAAciB,GAAGX,YAElEa,EAAOlE,EAAO,GAAG,IAAMkE,EAAOlE,EAAO,GAAG,MACxC+C,EAAciB,GAAGd,KAAKE,GAAKL,EAAciB,GAAGd,KAAKE,EACjDc,EAAO/D,EAAO6D,GAAG,GAAMjB,EAAciB,GAAGd,KAAKE,EAAIL,EAAciB,GAAGX,WAGtElD,EAAO6D,GAAK,CAACC,EAAMC,IAevBC,GACA1C,EAAE2C,aAAa,GACVrE,GAAM0B,EAAEoC,SARF,UASKP,GATL,IASX,IAAK,EAAL,qBAA2B,KAAhBjB,EAAgB,QACvBZ,EAAEqC,OAAF,MAAArC,EAAC,EAAWY,EAAEf,QACVvB,GAAM0B,EAAEpB,KAAF,MAAAoB,EAAC,EAASY,EAAEf,QACtBG,EAAEQ,SAAF,MAAAR,EAAC,EAAaY,EAAEhF,GAAf,SAAqBgF,EAAE/E,GAAvB,EAA6B+E,EAAE9E,MAZzB,8BAgBPkE,EAAE2C,aAAa,IACf3C,EAAEqC,OAAO,SAFG,UAGStC,GAHT,IAGZ,IAAK,EAAL,qBAA6B,oBAAjBnD,EAAiB,KAAd+E,EAAc,KACzB3B,EAAEM,MAAM1D,EAAG+E,IAJH,gCAiBpB3B,EAAE4C,aAAe,WACb,IAAK,IAAIL,EAAI,EAAGA,EAAI7D,EAAO6C,OAAQgB,IAAK,CACpC,QAAe7D,EAAO6D,GAAtB,GAAO3F,EAAP,KAAU+E,EAAV,KACU1F,EAAK,CAAC+D,EAAE6C,OAAQ7C,EAAE8C,QAAS,CAAClG,EAAG+E,IACjC,KACJG,EAAgBS,KAK5BvC,EAAE+C,aAAe,WACb,QAAerE,EAAOoD,GAAtB,GAAOlF,EAAP,KAAU+E,EAAV,KACI1F,EAAK,CAAC+D,EAAE6C,OAAQ7C,EAAE8C,QAAS,CAAClG,EAAG+E,IAAM,KACrCjD,EAAOoD,GAAiB,CAAC9B,EAAE6C,OAAQ7C,EAAE8C,YAKlC,UACfE,SAASC,eAAe,eAAeC,SAAW,SAACnC,GAC/CzC,EAAOyC,EAAEoC,OAAOC,U","sources":["webpack://p5_test/./src/utils.js","webpack://p5_test/./src/index.js"],"sourcesContent":["export const cosineRule = (a, b, c) => Math.acos((b*b + c*c - a*a) / (2 * b * c));\r\n\r\nexport const dist = (p1, p2) => Math.sqrt(Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2));\r\n\r\nexport const circumcenter = (a, b, c) => {\r\n    const ab = dist(a, b);\r\n    const ac = dist(a, c);\r\n    const bc = dist(b, c);\r\n    const A = cosineRule(bc, ab, ac);\r\n    const B = cosineRule(ac, bc, ab);\r\n    const C = Math.PI - (A + B);\r\n    const sin2A = Math.sin(2 * A);\r\n    const sin2B = Math.sin(2 * B);\r\n    const sin2C = Math.sin(2 * C);\r\n    const denom = sin2A + sin2B + sin2C;\r\n    return [\r\n        (a[0]*sin2A + b[0]*sin2B + c[0]*sin2C) / denom,\r\n        (a[1]*sin2A + b[1]*sin2B + c[1]*sin2C) / denom\r\n    ];\r\n}\r\n\r\nexport const circumradius = (a, b, c) => {\r\n    [a, b, c] = [dist(a, b), dist(a, c), dist(b, c)];\r\n    return (\r\n        (a * b * c) / Math.sqrt((a + b + c) * (b + c - a) * (c + a - b) * (a + b - c))\r\n    );\r\n}\r\n\r\nexport const randint = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a;\r\n\r\nexport const getLineEquation = (p1, p2) => {\r\n    const m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\r\n    const c = p1[1] - m * p1[0];\r\n    return {\r\n        m, c,\r\n        // needs to be function not arrow to access this obj\r\n        func: function(x) {\r\n            return this.m * x + this.c;\r\n        }\r\n    };\r\n}\r\n\r\nexport const lineIntersection = (le1, le2) => {\r\n    if (le1.m === undefined || le2.m === undefined) {\r\n        throw \"an arg is not a line equation\";\r\n    }\r\n    const x = (le2.c - le1.c) / (le1.m - le2.m);\r\n    const y = le1.func(x);\r\n    return [x, y];\r\n}\r\n\r\nexport const getSuperTriangle = (P, Q, R, S, example = false) => {\r\n    // Vertex order:\r\n    // b---c\r\n    // |   |\r\n    // a---d\r\n    const scale = 1.05;\r\n    const M = [P[0] + (S[0] - P[0]) / 2, P[1] + (Q[1] - P[1]) / 2];\r\n    const getScaled = (v) => [scale * (v[0] - M[0]) + M[0], scale * (v[1] - M[1]) + M[1]];\r\n    const A = getScaled(P);\r\n    const B = getScaled(Q);\r\n    const C = getScaled(R);\r\n    const D = getScaled(S);\r\n    const width = D[0] - A[0];\r\n    const left = [A[0] - width, A[1]];  // L\r\n    const right = [D[0] + width, D[1]]; // R\r\n    const I = lineIntersection(getLineEquation(left, B), getLineEquation(right, C));\r\n    if (example) {\r\n        return [[left, I, right], [A, B, C, D]];\r\n    }\r\n    return [left, I, right];\r\n}\r\n","import { circumcenter, circumradius, randint, dist, getSuperTriangle } from \"./utils\";\r\n\r\nconst WIDTH = 1000;\r\nconst HEIGHT = 1000;\r\nconst NUM_OF_POINTS = 20;\r\nlet FILL = true;\r\nlet SHOW_VERTS = true;\r\nlet SHOW_CIRCLES = false;\r\n\r\nconst BOUNDS = [[100, 100], [100, HEIGHT - 100], [WIDTH - 100, HEIGHT - 100], [WIDTH - 100, 100]];\r\nconst BOUNDS_WIDTH = BOUNDS[3][0] - BOUNDS[0][0];\r\nconst BOUNDS_HEIGHT = BOUNDS[1][1] - BOUNDS[0][1];\r\n\r\nconst POINTS = [\r\n    // [0, 0], [0, 1000], [1000, 1000], [1000, 0],\r\n    ...Array(NUM_OF_POINTS).fill(0).map(_ => [randint(BOUNDS[0][0], BOUNDS_WIDTH), randint(BOUNDS[0][1], BOUNDS_HEIGHT)])\r\n];\r\n\r\nclass Triangle {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.edges = this.getEdges();\r\n        this.circumcenter = circumcenter(this.a, this.b, this.c);\r\n        this.circumradius = circumradius(this.a, this.b, this.c);\r\n        this.color = [\r\n            0,\r\n            255 * (Math.min(...this.points.map(p => p[1])) / HEIGHT),\r\n            // 255 * (1 - ((Math.min(...this.points.map(p => p[1])) / HEIGHT)))\r\n            255 * (Math.min(...this.points.map(p => p[1])) / HEIGHT)\r\n        ];\r\n    }\r\n\r\n    getEdges() {\r\n        return [[this.a, this.b], [this.b, this.c], [this.c, this.a]];\r\n    }\r\n\r\n    get points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n}\r\n\r\nconst makeRandomVector = () => {\r\n    const angle = randint(0, 360) * (Math.PI / 180);\r\n    return {\r\n        unit: {x: Math.cos(angle), y: Math.sin(angle)},\r\n        magnitude: randint(1, 3)\r\n    }\r\n}\r\n\r\nconst makeTriangulation = (points, pointBounds) => {\r\n    const compareEdges = (e1, e2) => {\r\n        return (\r\n            e1[0][0] === e2[0][0] &&\r\n            e1[0][1] === e2[0][1] &&\r\n            e1[1][0] === e2[1][0] &&\r\n            e1[1][1] === e2[1][1]\r\n        ) || (\r\n            e1[1][0] === e2[0][0] &&\r\n            e1[1][1] === e2[0][1] &&\r\n            e1[0][0] === e2[1][0] &&\r\n            e1[0][1] === e2[1][1]\r\n        )\r\n    }\r\n    const superTriangle = new Triangle(...getSuperTriangle(...pointBounds));\r\n\r\n    let triangulation = [];\r\n    triangulation.push(superTriangle);\r\n    for (const point of points) {\r\n        const badTriangles = [];\r\n        for (const triangle of triangulation) {\r\n            if (dist(point, triangle.circumcenter) < triangle.circumradius) {\r\n                badTriangles.push(triangle);\r\n            }\r\n        }\r\n        const polygon = [];\r\n        for (const triangle of badTriangles) {\r\n            for (const edge of triangle.edges) {\r\n                // remove current triangle, get all edges\r\n                const isEdge = badTriangles.filter(t => t !== triangle)\r\n                                           .flatMap(t => t.edges)\r\n                                           .find(e => compareEdges(e, edge));\r\n                if (isEdge === undefined) {\r\n                    polygon.push(edge);\r\n                }\r\n            }\r\n        }\r\n        for (const triangle of badTriangles) {\r\n            triangulation = triangulation.filter(t => t !== triangle);\r\n        }\r\n        for (const edge of polygon) {\r\n            const newTri = new Triangle(edge[0], edge[1], point);\r\n            triangulation.push(newTri);\r\n        }\r\n    }\r\n    for (const triangle of triangulation) {\r\n        if (triangle.points.some(v => superTriangle.points.includes(v))) {\r\n            triangulation = triangulation.filter(t => t !== triangle);\r\n        }\r\n    }\r\n    return triangulation;\r\n}\r\n\r\n\r\n\r\nconst sketch = (p) => {\r\n    const points = POINTS;\r\n    const pointsVectors = Array(POINTS.length).fill(0).map(_ => makeRandomVector());\r\n    // const bounds = [[0, 0], [0, HEIGHT], [WIDTH, HEIGHT], [WIDTH, 0]];\r\n    let triangles = makeTriangulation(POINTS, BOUNDS);\r\n    let selectedIndex = null;\r\n\r\n    const movePoints = () => {\r\n        for (let i = 0; i < POINTS.length; i++) {\r\n            let newX = POINTS[i][0] + (pointsVectors[i].unit.x * pointsVectors[i].magnitude);\r\n            let newY = POINTS[i][1] + (pointsVectors[i].unit.y * pointsVectors[i].magnitude);\r\n\r\n            if (newX < BOUNDS[0][0] || newX > BOUNDS[3][0]) {\r\n                pointsVectors[i].unit.x = -pointsVectors[i].unit.x;\r\n                newX = POINTS[i][0] + (pointsVectors[i].unit.x * pointsVectors[i].magnitude);\r\n            }\r\n            if (newY < BOUNDS[0][1] || newY > BOUNDS[2][0]) {\r\n                pointsVectors[i].unit.y = -pointsVectors[i].unit.y;\r\n                newY = POINTS[i][1] + (pointsVectors[i].unit.y * pointsVectors[i].magnitude);\r\n            }\r\n\r\n            POINTS[i] = [newX, newY];\r\n        }\r\n    }\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(WIDTH, HEIGHT);\r\n        p.frameRate(60);\r\n    }\r\n\r\n    p.draw = () => {\r\n        p.background(255);\r\n        triangles = makeTriangulation(POINTS, BOUNDS);\r\n        p.noFill();\r\n        p.stroke(\"red\");\r\n        p.rect(100, 100, BOUNDS_WIDTH, BOUNDS_HEIGHT);\r\n        movePoints();\r\n        p.strokeWeight(1);\r\n        if (!FILL) p.noFill();\r\n        for (const t of triangles) {\r\n            p.stroke(...t.color);\r\n            if (FILL) p.fill(...t.color);\r\n            p.triangle(...t.a, ...t.b, ...t.c);\r\n        }\r\n\r\n        if (SHOW_VERTS) {\r\n            p.strokeWeight(10);\r\n            p.stroke(\"black\");\r\n            for (const [x, y] of points) {\r\n                p.point(x, y);\r\n            }\r\n        }\r\n\r\n        if (SHOW_CIRCLES) {\r\n            p.noFill();\r\n            for (const t of triangles) {\r\n                p.stroke(...t.color);\r\n                p.circle(...t.circumcenter, t.circumradius * 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    p.mousePressed = () => {\r\n        for (let i = 0; i < POINTS.length; i++) {\r\n            const [x, y] = POINTS[i];\r\n            const d = dist([p.mouseX, p.mouseY], [x, y]);\r\n            if (d < 20) {\r\n                selectedIndex = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    p.mouseDragged = () => {\r\n        const [x, y] = POINTS[selectedIndex];\r\n        if (dist([p.mouseX, p.mouseY], [x, y]) < 20) {\r\n            POINTS[selectedIndex] = [p.mouseX, p.mouseY];\r\n        }\r\n    }\r\n}\r\n\r\nnew p5(sketch, \"canvas\");\r\ndocument.getElementById(\"toggle-fill\").onchange = (e) => {\r\n    FILL = e.target.checked;\r\n}\r\n\r\n"],"names":["cosineRule","a","b","c","Math","acos","dist","p1","p2","sqrt","pow","randint","floor","random","getLineEquation","m","func","x","this","lineIntersection","le1","le2","undefined","getSuperTriangle","P","Q","R","S","example","scale","M","getScaled","v","A","B","C","D","width","left","right","I","WIDTH","HEIGHT","FILL","BOUNDS","BOUNDS_WIDTH","BOUNDS_HEIGHT","POINTS","Array","fill","map","_","Triangle","edges","getEdges","circumcenter","ab","ac","bc","PI","sin2A","sin","sin2B","sin2C","denom","circumradius","color","min","points","p","makeTriangulation","pointBounds","superTriangle","triangulation","push","point","badTriangles","triangle","polygon","edge","filter","t","flatMap","find","e","e2","e1","newTri","some","includes","p5","pointsVectors","length","angle","unit","cos","y","magnitude","triangles","selectedIndex","setup","createCanvas","frameRate","draw","background","noFill","stroke","rect","i","newX","newY","movePoints","strokeWeight","mousePressed","mouseX","mouseY","mouseDragged","document","getElementById","onchange","target","checked"],"sourceRoot":""}